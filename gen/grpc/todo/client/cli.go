// Code generated by goa v3.11.3, DO NOT EDIT.
//
// todo gRPC client CLI support package
//
// Command:
// $ goa gen todo/design

package client

import (
	"encoding/json"
	"fmt"
	todopb "todo/gen/grpc/todo/pb"
	todo "todo/gen/todo"
)

// BuildCreateTaskPayload builds the payload for the todo createTask endpoint
// from CLI flags.
func BuildCreateTaskPayload(todoCreateTaskMessage string) (*todo.CreateTaskPayload, error) {
	var err error
	var message todopb.CreateTaskRequest
	{
		if todoCreateTaskMessage != "" {
			err = json.Unmarshal([]byte(todoCreateTaskMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Dolore voluptatum est voluptatibus cum.\"\n   }'")
			}
		}
	}
	v := &todo.CreateTaskPayload{
		Name: message.Name,
	}

	return v, nil
}

// BuildCompleteTaskPayload builds the payload for the todo completeTask
// endpoint from CLI flags.
func BuildCompleteTaskPayload(todoCompleteTaskMessage string) (*todo.CompleteTaskPayload, error) {
	var err error
	var message todopb.CompleteTaskRequest
	{
		if todoCompleteTaskMessage != "" {
			err = json.Unmarshal([]byte(todoCompleteTaskMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Exercitationem sit porro et.\"\n   }'")
			}
		}
	}
	v := &todo.CompleteTaskPayload{
		ID: message.Id,
	}

	return v, nil
}

// BuildRevertTaskPayload builds the payload for the todo revertTask endpoint
// from CLI flags.
func BuildRevertTaskPayload(todoRevertTaskMessage string) (*todo.RevertTaskPayload, error) {
	var err error
	var message todopb.RevertTaskRequest
	{
		if todoRevertTaskMessage != "" {
			err = json.Unmarshal([]byte(todoRevertTaskMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Dignissimos voluptas qui qui aut rerum.\"\n   }'")
			}
		}
	}
	v := &todo.RevertTaskPayload{
		ID: message.Id,
	}

	return v, nil
}
