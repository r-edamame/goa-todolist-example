// Code generated by goa v3.11.3, DO NOT EDIT.
//
// todo gRPC server types
//
// Command:
// $ goa gen todo/design

package server

import (
	todopb "todo/gen/grpc/todo/pb"
	todo "todo/gen/todo"
)

// NewCreateTaskPayload builds the payload of the "createTask" endpoint of the
// "todo" service from the gRPC request type.
func NewCreateTaskPayload(message *todopb.CreateTaskRequest) *todo.CreateTaskPayload {
	v := &todo.CreateTaskPayload{
		Name: message.Name,
	}
	return v
}

// NewProtoCreateTaskResponse builds the gRPC response type from the result of
// the "createTask" endpoint of the "todo" service.
func NewProtoCreateTaskResponse(result *todo.Task) *todopb.CreateTaskResponse {
	message := &todopb.CreateTaskResponse{
		Id:        result.ID,
		Name:      result.Name,
		Completed: result.Completed,
	}
	return message
}

// NewCompleteTaskPayload builds the payload of the "completeTask" endpoint of
// the "todo" service from the gRPC request type.
func NewCompleteTaskPayload(message *todopb.CompleteTaskRequest) *todo.CompleteTaskPayload {
	v := &todo.CompleteTaskPayload{
		ID: message.Id,
	}
	return v
}

// NewProtoCompleteTaskResponse builds the gRPC response type from the result
// of the "completeTask" endpoint of the "todo" service.
func NewProtoCompleteTaskResponse(result *todo.Task) *todopb.CompleteTaskResponse {
	message := &todopb.CompleteTaskResponse{
		Id:        result.ID,
		Name:      result.Name,
		Completed: result.Completed,
	}
	return message
}

// NewRevertTaskPayload builds the payload of the "revertTask" endpoint of the
// "todo" service from the gRPC request type.
func NewRevertTaskPayload(message *todopb.RevertTaskRequest) *todo.RevertTaskPayload {
	v := &todo.RevertTaskPayload{
		ID: message.Id,
	}
	return v
}

// NewProtoRevertTaskResponse builds the gRPC response type from the result of
// the "revertTask" endpoint of the "todo" service.
func NewProtoRevertTaskResponse(result *todo.Task) *todopb.RevertTaskResponse {
	message := &todopb.RevertTaskResponse{
		Id:        result.ID,
		Name:      result.Name,
		Completed: result.Completed,
	}
	return message
}
