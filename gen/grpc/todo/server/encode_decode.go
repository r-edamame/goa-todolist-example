// Code generated by goa v3.11.3, DO NOT EDIT.
//
// todo gRPC server encoders and decoders
//
// Command:
// $ goa gen todo/design

package server

import (
	"context"
	todopb "todo/gen/grpc/todo/pb"
	todo "todo/gen/todo"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeCreateTaskResponse encodes responses from the "todo" service
// "createTask" endpoint.
func EncodeCreateTaskResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*todo.Task)
	if !ok {
		return nil, goagrpc.ErrInvalidType("todo", "createTask", "*todo.Task", v)
	}
	resp := NewProtoCreateTaskResponse(result)
	return resp, nil
}

// DecodeCreateTaskRequest decodes requests sent to "todo" service "createTask"
// endpoint.
func DecodeCreateTaskRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *todopb.CreateTaskRequest
		ok      bool
	)
	{
		if message, ok = v.(*todopb.CreateTaskRequest); !ok {
			return nil, goagrpc.ErrInvalidType("todo", "createTask", "*todopb.CreateTaskRequest", v)
		}
	}
	var payload *todo.CreateTaskPayload
	{
		payload = NewCreateTaskPayload(message)
	}
	return payload, nil
}

// EncodeCompleteTaskResponse encodes responses from the "todo" service
// "completeTask" endpoint.
func EncodeCompleteTaskResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*todo.Task)
	if !ok {
		return nil, goagrpc.ErrInvalidType("todo", "completeTask", "*todo.Task", v)
	}
	resp := NewProtoCompleteTaskResponse(result)
	return resp, nil
}

// DecodeCompleteTaskRequest decodes requests sent to "todo" service
// "completeTask" endpoint.
func DecodeCompleteTaskRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *todopb.CompleteTaskRequest
		ok      bool
	)
	{
		if message, ok = v.(*todopb.CompleteTaskRequest); !ok {
			return nil, goagrpc.ErrInvalidType("todo", "completeTask", "*todopb.CompleteTaskRequest", v)
		}
	}
	var payload *todo.CompleteTaskPayload
	{
		payload = NewCompleteTaskPayload(message)
	}
	return payload, nil
}

// EncodeRevertTaskResponse encodes responses from the "todo" service
// "revertTask" endpoint.
func EncodeRevertTaskResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*todo.Task)
	if !ok {
		return nil, goagrpc.ErrInvalidType("todo", "revertTask", "*todo.Task", v)
	}
	resp := NewProtoRevertTaskResponse(result)
	return resp, nil
}

// DecodeRevertTaskRequest decodes requests sent to "todo" service "revertTask"
// endpoint.
func DecodeRevertTaskRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *todopb.RevertTaskRequest
		ok      bool
	)
	{
		if message, ok = v.(*todopb.RevertTaskRequest); !ok {
			return nil, goagrpc.ErrInvalidType("todo", "revertTask", "*todopb.RevertTaskRequest", v)
		}
	}
	var payload *todo.RevertTaskPayload
	{
		payload = NewRevertTaskPayload(message)
	}
	return payload, nil
}
