// Code generated by goa v3.11.3, DO NOT EDIT.
//
// todo gRPC client CLI support package
//
// Command:
// $ goa gen todo/design

package cli

import (
	"flag"
	"fmt"
	"os"
	todoc "todo/gen/grpc/todo/client"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `todo (create-task|complete-task|revert-task)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` todo create-task --message '{
      "name": "Dolore voluptatum est voluptatibus cum."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, any, error) {
	var (
		todoFlags = flag.NewFlagSet("todo", flag.ContinueOnError)

		todoCreateTaskFlags       = flag.NewFlagSet("create-task", flag.ExitOnError)
		todoCreateTaskMessageFlag = todoCreateTaskFlags.String("message", "", "")

		todoCompleteTaskFlags       = flag.NewFlagSet("complete-task", flag.ExitOnError)
		todoCompleteTaskMessageFlag = todoCompleteTaskFlags.String("message", "", "")

		todoRevertTaskFlags       = flag.NewFlagSet("revert-task", flag.ExitOnError)
		todoRevertTaskMessageFlag = todoRevertTaskFlags.String("message", "", "")
	)
	todoFlags.Usage = todoUsage
	todoCreateTaskFlags.Usage = todoCreateTaskUsage
	todoCompleteTaskFlags.Usage = todoCompleteTaskUsage
	todoRevertTaskFlags.Usage = todoRevertTaskUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "todo":
			svcf = todoFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "todo":
			switch epn {
			case "create-task":
				epf = todoCreateTaskFlags

			case "complete-task":
				epf = todoCompleteTaskFlags

			case "revert-task":
				epf = todoRevertTaskFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "todo":
			c := todoc.NewClient(cc, opts...)
			switch epn {
			case "create-task":
				endpoint = c.CreateTask()
				data, err = todoc.BuildCreateTaskPayload(*todoCreateTaskMessageFlag)
			case "complete-task":
				endpoint = c.CompleteTask()
				data, err = todoc.BuildCompleteTaskPayload(*todoCompleteTaskMessageFlag)
			case "revert-task":
				endpoint = c.RevertTask()
				data, err = todoc.BuildRevertTaskPayload(*todoRevertTaskMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// todoUsage displays the usage of the todo command and its subcommands.
func todoUsage() {
	fmt.Fprintf(os.Stderr, `todo service for management tasks
Usage:
    %[1]s [globalflags] todo COMMAND [flags]

COMMAND:
    create-task: CreateTask implements createTask.
    complete-task: CompleteTask implements completeTask.
    revert-task: RevertTask implements revertTask.

Additional help:
    %[1]s todo COMMAND --help
`, os.Args[0])
}
func todoCreateTaskUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] todo create-task -message JSON

CreateTask implements createTask.
    -message JSON: 

Example:
    %[1]s todo create-task --message '{
      "name": "Dolore voluptatum est voluptatibus cum."
   }'
`, os.Args[0])
}

func todoCompleteTaskUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] todo complete-task -message JSON

CompleteTask implements completeTask.
    -message JSON: 

Example:
    %[1]s todo complete-task --message '{
      "id": "Exercitationem sit porro et."
   }'
`, os.Args[0])
}

func todoRevertTaskUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] todo revert-task -message JSON

RevertTask implements revertTask.
    -message JSON: 

Example:
    %[1]s todo revert-task --message '{
      "id": "Dignissimos voluptas qui qui aut rerum."
   }'
`, os.Args[0])
}
