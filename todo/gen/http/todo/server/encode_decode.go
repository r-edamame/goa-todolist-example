// Code generated by goa v3.11.3, DO NOT EDIT.
//
// todo HTTP server encoders and decoders
//
// Command:
// $ goa gen todo/design

package server

import (
	"context"
	"io"
	"net/http"
	todo "todo/gen/todo"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListTasksResponse returns an encoder for responses returned by the
// todo listTasks endpoint.
func EncodeListTasksResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*todo.Task)
		enc := encoder(ctx, w)
		body := NewListTasksResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeCreateTaskResponse returns an encoder for responses returned by the
// todo createTask endpoint.
func EncodeCreateTaskResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*todo.Task)
		enc := encoder(ctx, w)
		body := NewCreateTaskResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateTaskRequest returns a decoder for requests sent to the todo
// createTask endpoint.
func DecodeCreateTaskRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateTaskRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewCreateTaskPayload(&body)

		return payload, nil
	}
}

// EncodeCompleteTaskResponse returns an encoder for responses returned by the
// todo completeTask endpoint.
func EncodeCompleteTaskResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*todo.Task)
		enc := encoder(ctx, w)
		body := NewCompleteTaskResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCompleteTaskRequest returns a decoder for requests sent to the todo
// completeTask endpoint.
func DecodeCompleteTaskRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewCompleteTaskPayload(id)

		return payload, nil
	}
}

// EncodeRevertTaskResponse returns an encoder for responses returned by the
// todo revertTask endpoint.
func EncodeRevertTaskResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*todo.Task)
		enc := encoder(ctx, w)
		body := NewRevertTaskResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRevertTaskRequest returns a decoder for requests sent to the todo
// revertTask endpoint.
func DecodeRevertTaskRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewRevertTaskPayload(id)

		return payload, nil
	}
}

// marshalTodoTaskToTaskResponse builds a value of type *TaskResponse from a
// value of type *todo.Task.
func marshalTodoTaskToTaskResponse(v *todo.Task) *TaskResponse {
	res := &TaskResponse{
		ID:        v.ID,
		Name:      v.Name,
		Completed: v.Completed,
	}

	return res
}
