// Code generated by goa v3.11.3, DO NOT EDIT.
//
// todo HTTP server types
//
// Command:
// $ goa gen todo/design

package server

import (
	todo "todo/gen/todo"
)

// CreateTaskRequestBody is the type of the "todo" service "createTask"
// endpoint HTTP request body.
type CreateTaskRequestBody struct {
	// name of task
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// ListTasksResponseBody is the type of the "todo" service "listTasks" endpoint
// HTTP response body.
type ListTasksResponseBody []*TaskResponse

// CreateTaskResponseBody is the type of the "todo" service "createTask"
// endpoint HTTP response body.
type CreateTaskResponseBody struct {
	// id of task
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name of task
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// status of task
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
}

// CompleteTaskResponseBody is the type of the "todo" service "completeTask"
// endpoint HTTP response body.
type CompleteTaskResponseBody struct {
	// id of task
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name of task
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// status of task
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
}

// RevertTaskResponseBody is the type of the "todo" service "revertTask"
// endpoint HTTP response body.
type RevertTaskResponseBody struct {
	// id of task
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name of task
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// status of task
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
}

// TaskResponse is used to define fields on response body types.
type TaskResponse struct {
	// id of task
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name of task
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// status of task
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
}

// NewListTasksResponseBody builds the HTTP response body from the result of
// the "listTasks" endpoint of the "todo" service.
func NewListTasksResponseBody(res []*todo.Task) ListTasksResponseBody {
	body := make([]*TaskResponse, len(res))
	for i, val := range res {
		body[i] = marshalTodoTaskToTaskResponse(val)
	}
	return body
}

// NewCreateTaskResponseBody builds the HTTP response body from the result of
// the "createTask" endpoint of the "todo" service.
func NewCreateTaskResponseBody(res *todo.Task) *CreateTaskResponseBody {
	body := &CreateTaskResponseBody{
		ID:        res.ID,
		Name:      res.Name,
		Completed: res.Completed,
	}
	return body
}

// NewCompleteTaskResponseBody builds the HTTP response body from the result of
// the "completeTask" endpoint of the "todo" service.
func NewCompleteTaskResponseBody(res *todo.Task) *CompleteTaskResponseBody {
	body := &CompleteTaskResponseBody{
		ID:        res.ID,
		Name:      res.Name,
		Completed: res.Completed,
	}
	return body
}

// NewRevertTaskResponseBody builds the HTTP response body from the result of
// the "revertTask" endpoint of the "todo" service.
func NewRevertTaskResponseBody(res *todo.Task) *RevertTaskResponseBody {
	body := &RevertTaskResponseBody{
		ID:        res.ID,
		Name:      res.Name,
		Completed: res.Completed,
	}
	return body
}

// NewCreateTaskPayload builds a todo service createTask endpoint payload.
func NewCreateTaskPayload(body *CreateTaskRequestBody) *todo.CreateTaskPayload {
	v := &todo.CreateTaskPayload{
		Name: body.Name,
	}

	return v
}

// NewCompleteTaskPayload builds a todo service completeTask endpoint payload.
func NewCompleteTaskPayload(id string) *todo.CompleteTaskPayload {
	v := &todo.CompleteTaskPayload{}
	v.ID = &id

	return v
}

// NewRevertTaskPayload builds a todo service revertTask endpoint payload.
func NewRevertTaskPayload(id string) *todo.RevertTaskPayload {
	v := &todo.RevertTaskPayload{}
	v.ID = &id

	return v
}
